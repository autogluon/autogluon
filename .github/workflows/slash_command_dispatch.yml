name: Slash Command Dispatch
on:
  issue_comment:
    types: [created]
jobs:
  slashCommandDispatch:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request }}
    steps:
      - name: Parse Command and Get SHA
        id: parse_command
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const body = context.payload.comment.body.trim();
            // Both commands require a SHA as first argument
            const platformTestsRegex = /^\/platform_tests\s+([a-f0-9]{40})/;
            const benchmarkRegex = /^\/benchmark\s+([a-f0-9]{40})/;

            let command = '';
            let sha = '';

            // Check if it's a platform_tests command
            const platformMatch = body.match(platformTestsRegex);
            if (platformMatch) {
              command = 'platform_tests';
              sha = platformMatch[1];
              console.log(`Extracted command: "${command}", SHA: "${sha}"`);
              return JSON.stringify({ command, sha });
            }

            // Check if it's a benchmark command
            const benchmarkMatch = body.match(benchmarkRegex);
            if (benchmarkMatch) {
              command = 'benchmark';
              sha = benchmarkMatch[1];
              console.log(`Extracted command: "${command}", SHA: "${sha}"`);
              return JSON.stringify({ command, sha });
            }

            throw new Error("Invalid command format. Both commands require a 40-character SHA as the first argument. \nUse: '/platform_tests <SHA>' or '/benchmark <SHA> [parameters]'");

      - name: Extract Command Info
        id: command_info
        run: |
          RESULT='${{ steps.parse_command.outputs.result }}'
          COMMAND=$(echo $RESULT | jq -r '.command')
          SHA=$(echo $RESULT | jq -r '.sha')
          echo "COMMAND=$COMMAND" >> $GITHUB_OUTPUT
          echo "SHA=$SHA" >> $GITHUB_OUTPUT

      - name: Get PR number
        id: pr_number
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { owner, repo, number } = context.issue;
            return number

      - name: Get Forked Repository and Branch
        id: pr_info
        run: |
          # Use the GitHub API to fetch information about the pull request
          pr_info=$(curl -s -H "Authorization: token ${{ secrets.CICD_PAT }}" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.pr_number.outputs.result }}")

          # Extract the forked repository and branch from the pull request info
          forked_repo=$(echo "$pr_info" | jq -r '.head.repo.full_name')
          forked_branch=$(echo "$pr_info" | jq -r '.head.ref')
          echo "Forked Repository: $forked_repo"
          echo "Forked Branch: $forked_branch"
          echo "FORK_NAME=$forked_repo" >> $GITHUB_OUTPUT
          echo "FORK_BRANCH=$forked_branch" >> $GITHUB_OUTPUT

      - name: Slash Command Dispatch
        id: scd
        uses: peter-evans/slash-command-dispatch@v4
        with:
          token: ${{ secrets.CICD_PAT }}
          permission: write
          commands: |
            benchmark
            platform_tests
          dispatch-type: workflow
          static-args: |
            repository=${{ github.repository }}
            comment-id=${{ github.event.comment.id }}
            pr-sha=${{ steps.command_info.outputs.SHA }}
            branch_or_pr_number=PR-${{ steps.pr_number.outputs.result }}
            fork_info=${{ steps.pr_info.outputs.FORK_NAME }}|${{ steps.pr_info.outputs.FORK_BRANCH }}

      - name: Edit comment with error message
        if: steps.scd.outputs.error-message
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ github.event.comment.id }}
          body: |
            > ${{ steps.scd.outputs.error-message }}
