ARG CUDA_VER=11.0
ARG LINUX_VER=ubuntu18.04
ARG PYTHON_VERSION=3.8.12
ARG PYTHON_VER=3.8
ARG FROM_IMAGE=rapidsai/rapidsai-core

FROM ${FROM_IMAGE}:cuda${CUDA_VER}-base-${LINUX_VER}-py${PYTHON_VER}

LABEL maintainer="AutoGluon Team"

ARG CUDA_VER

ARG OPENSSL_VERSION=1.1.1l

ARG MXNET_VER=1.8.*

ARG AWSCLI_VER=1.22.45

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    MXNET_CUDNN_LIB_CHECKING=0 \
    LD_LIBRARY_PATH=/opt/conda/envs/rapids/lib:/usr/local/lib:$LD_LIBRARY_PATH \
    PATH=/opt/conda/envs/rapids/bin:/usr/local/bin:$PATH 

RUN apt-get update \
 && apt-get -y upgrade \
 && apt-get install -y --no-install-recommends \
    build-essential \
    libgl1-mesa-glx \
    ffmpeg \
    libsm6 \
    libxext6 \
    emacs \
    vim \
    pandoc \
 && apt-get autoremove -y \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/* \
 && rm -rf /tmp/*

# install OpenSSL
RUN wget -q -c https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz \
 && tar -xzf openssl-${OPENSSL_VERSION}.tar.gz \
 && cd openssl-${OPENSSL_VERSION} \
 && ./config && make -j $(nproc) && make install \
 && ldconfig \
 && cd .. && rm -rf openssl-* \
 && rmdir /usr/local/ssl/certs \
 && ln -s /etc/ssl/certs /usr/local/ssl/certs

ARG CUDNN_VERSION=8.*

RUN conda update conda -y \
 && conda update --all -y \
 && conda clean --all -y

RUN source activate rapids \
 && conda remove gdal libgdal dask dask-core dask-cuda dask-cudf distributed markdown -y \
 && conda update --all -y \
 && conda clean --all -y

RUN source activate rapids \
 && conda install -c conda-forge cudnn==${CUDNN_VERSION} -y \
 && pip install --no-cache-dir -U --trusted-host pypi.org --trusted-host files.pythonhosted.org pip \
 && pip install --no-cache-dir -U setuptools wheel \
 && pip install --no-cache-dir -U --no-use-pep517 mxnet-cu$(echo ${CUDA_VER} | sed 's/\.//')==${MXNET_VER} \
 && pip install --no-cache-dir -U cupy-cuda$(echo ${CUDA_VER} | sed 's/\.//')==9.* \
 && pip install --no-cache-dir -U awscli==${AWSCLI_VER} \
 && pip uninstall -y \
    datashader \
    ipykernel \
    ipython \
    ipython-genutils \
    ipywidgets \
    jupyter-client \
    jupyter-core \
    jupyter-packaging \
    jupyter-server \
    jupyter-server-proxy \
    jupyterlab \
    jupyterlab-nvdashboard \
    jupyterlab-pygments \
    jupyterlab-server \
    jupyterlab-widgets \
    matplotlib-inline \
    nbclient \
    nbconvert \
    nbformat \
    notebook \
    panel \
    pydeck \
    pyppeteer \
    traitlets \
    websockets \
    widgetsnbextension 

WORKDIR /

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new \
 && echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new \
 && mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

RUN rm -rf /root/.ssh/ && \
  mkdir -p /root/.ssh/ && \
  ssh-keygen -q -t rsa -N '' -f /root/.ssh/id_rsa && \
  cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys \
  && printf "Host *\n StrictHostKeyChecking no\n" >> /root/.ssh/config

# This is here to make our installed version of OpenCV work.
# https://stackoverflow.com/questions/29274638/opencv-libdc1394-error-failed-to-initialize-libdc1394
# TODO: Should we be installing OpenCV in our image like this? Is there another way we can fix this?
RUN ln -s /dev/null /dev/raw1394

# setup git repo and add autogluon_job script
RUN git clone https://github.com/awslabs/autogluon.git
WORKDIR /autogluon
ADD autogluon_job.sh .
RUN chmod +x autogluon_job.sh

CMD ["/bin/bash"]
